import asyncio
import typer
from mcp_agent.core.fastagent import FastAgent
from mcp_agent.core.request_params import RequestParams

# Create the application
fast = FastAgent("Obsidian Poster")

app = typer.Typer()


@fast.agent(
    "summarizer",
    instruction="\
    You are a knowledge reieval assitant with access to a vector database of documents. \
    Use the tool `get_context` to retrieve relevant documents based on the provided topics, \
    use the context to generate a lecture of the information for the topics.\
    Ensure that the lecture contains spaces after headings (denoted with '#'), and TWO newlines before the start of a paragraph after a heading, e.g. '\n## Topic 1 \n\n content about topic1...' \
    Do not Bold headings.\
    If the quality_assurance agent recommends additional topics, query them with `get_context`.",
    request_params=RequestParams(maxTokens=4092),
    servers=["mcp_files"]
)

@fast.agent(
    "quality_assurance",
    instruction="\
    You are a quality assurance agent. \
    Evaluate the context generated by the summarizer and provide feedback on its quality. \
    Ensure that the lecture is not just simple paragraphs, but has full examples.    \
    Recommend additional topics for the summarizer to call `get_context` with to achieve a complete idea.\
    ",
)

@fast.agent(
    "blog_poster",
    instruction="\
    You are in charge of posting the passed in summary you receive to the blog with the tool `create_post`. \
    Ignore any words inside of '<think> </think>'. \
    Call the tool `create_post` with the following parameters:   \
    1) `content`: You will be given a markdown summary to insert as the 'content' argument. \
    2) generate a sufficient title and relevant tags from the content. ",
    servers=["mcp_blog"]
)

@fast.evaluator_optimizer(
    name="Researcher",
    generator="summarizer",
    evaluator="quality_assurance",
    min_rating="EXCELLENT",
    max_refinements=5
)

@fast.chain(
    name="doc_to_post",
    sequence=["Researcher", "blog_poster"],
    instruction="Summarize a topic and post it to blog.",
)

async def run_chain(agent, topic: str):
    # build the dynamic query using the CLI-provided topic
    query = f"\
    Create a blog post with summarized content from the vector database on the topic: {topic}.\
    Make sure the blog post is well formatted and professional."
    await agent.doc_to_post(query)

# Typer entry point
@app.command()
def main(topic: str = typer.Argument(..., help="Topic to summarize and post about")):
    """Run the doc_to_post chain for a given topic."""
    async def _inner():
        async with fast.run() as agent:
            await run_chain(agent, topic)
    asyncio.run(_inner())

if __name__ == "__main__":
    app()
