import asyncio
from mcp_agent.core.fastagent import FastAgent

# Create the application
fast = FastAgent("Obsidian Poster")


@fast.agent(
    "summarizer",
    instruction="\
    You are a knowledge reieval assitant with access to a vector database of documents. \
    Use the tool `get_context` to retrieve relevant documents based on the provided topics, \
    use the context to generate a summary of the information for the topics.\
    Ensure that the summary contains spaces after headings (denoted with '#'), and TWO newlines before the start of a paragraph after a heading, e.g. '\n## Topic 1 \n\n content about topic1...' \
    Do not Bold headings.",
    servers=["mcp_files"]
)
@fast.agent(
    "quality_assurance",
    instruction="\
    You are a quality assurance agent. \
    Evaluate the context generated by the summarizer and provide feedback on its quality. \
    Recommend additional topics for the summarizer to get context on so it can summarize a complete idea.\
    ",
)
@fast.agent(
    "blog_poster",
    instruction="\
    You are in charge of posting the passed in summary you receive to the blog with the tool `create_post`. \
    Ignore any words inside of '<think> </think>'. \
    Use the tool `create_post` with the following parameters:   \
    1) You will be given a markdown summary to insert as the 'content' argument. \
    2) generate a sufficient title and relevant tags from the content. ",
    servers=["mcp_blog"]
)

@fast.evaluator_optimizer(
    name="Researcher",
    generator="summarizer",
    evaluator="quality_assurance",
    min_rating="EXCELLENT",
    max_refinements=5
)
@fast.chain(
    name="doc_to_post",
    sequence=["Researcher",  "blog_poster"],
    instruction="Summarize a topic, convert the summary to html, and post it to FYM.",
)

async def main():
    # use the --model command line switch or agent arguments to change model
    async with fast.run() as agent:
        query = "Create a blog post with summarized content from the vector database on the topic: Functions"
        await agent.doc_to_post(query)


if __name__ == "__main__":
    asyncio.run(main())
